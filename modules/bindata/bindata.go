// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-GB.ini
// conf/locale/locale_pt-BR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x55\xfd\x4e\xe3\x46\x10\xff\x7f\x9e\x62\x9b\x8a\x96\xab\x20\x09\x70\xc7\xdd\x11\x21\xd5\xb1\x37\xc1\xc5\x5f\x5a\x3b\x70\x1c\x8a\x2c\xe3\x2c\x64\x75\x8e\xed\xdb\xdd\x94\xe6\x95\xfa\x1a\x7d\xb1\xce\xfa\x23\x44\xed\x19\xa4\xc4\xf3\xf1\xdb\x99\xdf\xfc\x76\xf2\x98\xd5\xf5\x12\x02\xcb\xa7\xe4\x9a\x44\xeb\x4a\x57\xa2\x54\x3a\x7b\x91\xd9\x06\x1c\x1a\xdb\xcc\x8d\x12\x37\x0c\xd0\xe9\xf6\x76\x52\x9b\x30\x60\x8b\x20\xf5\x43\xc7\xe4\x39\xf4\x0e\xe0\x51\x71\xf9\x27\x97\x4b\x88\x58\x98\x84\x76\xe8\x11\xf4\xac\xb5\xae\xc1\x09\x7d\xcb\x0d\x08\x31\x86\xf1\xb0\xf9\x83\x9b\x24\x89\x52\xcb\x71\x18\xb9\x6e\xbf\x47\x21\x4b\xd0\xff\x79\xfc\x79\x0c\x2c\x0c\x93\x74\xc1\x1a\x84\xa3\xe3\x1e\xef\x9d\xba\x1a\x8d\x8e\x8e\x5b\x34\x7c\x39\x3a\xde\x27\xbe\x53\x23\xf0\x42\xdb\xf2\xd2\x7d\x6a\x7b\xf6\x61\xc6\x7f\x13\x1c\x37\xb6\xa6\x1e\xc5\x94\x45\x42\x59\xea\x85\x73\x4c\x7a\xce\x0a\xc5\xc1\xa6\x2c\x49\x67\xae\x67\x9a\xcb\xb7\x4a\x57\x9b\x91\x41\x53\xa3\x9c\x4b\x3d\xac\xf9\x06\x6e\xe9\xc3\x0f\x03\xbe\xf1\x5d\xe3\x8f\x13\x2b\x71\xed\xb6\x9c\xc8\x4a\x6e\x30\x6e\x38\x02\x2b\x8a\x52\xc7\x4a\xac\xde\xb4\xca\x74\x06\x34\x68\xca\x98\x7f\x75\x23\xd3\xb0\x96\x5b\x0e\x8b\xc0\xfd\x92\xc6\xa1\x7d\x4b\x31\x9d\x32\xdf\x8d\xe3\x76\x0a\x97\x97\x97\x48\xb5\xc9\x7b\xca\x14\x5f\xc2\x84\x50\xa1\xd7\x5c\x92\xc1\x66\xa7\xbe\x17\x83\x13\x32\xa8\x2b\xa5\x5f\x24\x57\x03\x52\xa1\x19\x8d\x42\xf3\x0b\x74\x08\xfd\xab\x22\xbb\x6a\x2b\x49\xbe\xae\x44\xce\xc1\x99\xa6\xc9\x43\x64\x5a\xe8\x53\xe0\x26\x8c\xcd\x14\xce\xce\x3f\x36\x73\x3a\xbb\xfa\xf0\xfe\xe2\xbc\x97\x47\xdd\xc9\x03\x16\x31\x65\x87\x59\x91\x15\xc7\xf7\x0e\x4e\x12\x26\x6f\x98\x4d\x3d\x30\xf9\x1f\xe2\xc5\xc5\xf8\x72\x0c\x93\x0e\x53\xf2\x55\x21\x4a\x0e\x93\x0e\x73\x5d\x6d\x94\xe6\xd9\x0a\x26\x3d\x28\x51\x3c\x97\x5c\x23\x36\x99\x99\x86\x0e\xda\x2b\x8b\xdd\x09\xe1\x5d\xff\x2b\xa1\xb2\xa7\x82\x1b\x06\x24\xff\xbe\x15\x92\xb7\x04\xa0\x26\xc5\xf3\xee\xf4\x79\x5b\x14\x03\x88\x63\xaf\x17\x6d\x17\xdf\xc3\xf6\x3c\x91\xac\x5c\x91\x81\x16\xab\x27\x44\xda\x2a\x4e\xb2\x27\x55\x15\x5b\xcd\x49\x9d\xe9\x35\x79\x5d\xf3\xd2\x90\x48\xf0\x32\x48\x4d\x32\x45\x8c\xec\x0d\x9b\x07\x23\x1d\x75\x5d\x0d\x57\x4f\xcd\xbd\xc8\xb7\x52\xe8\xdd\x12\x62\x6a\x33\x1c\x28\x6a\x87\xbc\x3d\xd7\xe4\xa7\x9f\x7f\x9f\x39\xf4\x9e\xe1\xff\x2f\xbf\x1d\xa3\x90\xe7\x6e\x90\x32\xea\x53\x7f\x8a\xba\x74\xac\x87\xd8\x44\x7d\x04\x3b\x0c\x6f\x5d\x9a\x1a\xa6\x1a\xf6\xba\xf4\xd7\xd7\xd7\x53\x73\x6a\x9a\xbd\x72\x55\x6d\x78\x1f\xb7\x47\xe8\xa8\xde\xc7\x89\x12\x09\x5d\x09\xd3\x3c\xe0\xfd\x17\x4b\xb0\x3c\x2f\xbc\x4f\x6d\x16\xc6\x71\xda\xdd\xd6\x4e\x88\xf0\x98\x67\xf9\x1a\x85\x66\x39\x56\x94\x34\x23\xda\xf0\x4d\x25\x77\xe0\x06\xf8\x7a\x67\x99\x9b\x86\xf3\x6c\xc7\x8c\xe1\xe2\xec\x53\xb9\x04\xcf\x0a\xe6\x31\x7a\x78\x79\x3a\x9f\x9e\xd4\xfa\x74\xca\x1a\x15\x19\x1b\x2d\x5f\x0a\xa1\xd6\x27\x51\x25\xf5\xf6\x65\xfb\xcf\xdf\x8a\xac\x2a\x32\x95\x99\x12\x05\xe0\xed\xa0\xe9\x2c\x64\xbe\x11\x8d\x5f\x95\xe4\x8f\xac\x24\xe7\xe4\xec\xc3\xd5\xf8\xfd\xd5\xf8\x03\xf1\xf1\x98\xf3\xf1\xf8\xd2\xc8\x61\xa1\xf8\x8a\x3c\xe3\xf0\xb0\x2b\xae\xc5\x86\xd7\x22\xff\xc6\x65\x5b\xc3\xd0\x18\x8b\xac\x7c\x59\x02\x16\xb1\x68\x8b\x81\xa6\x12\x23\xdd\xa6\x22\x2c\xb7\xa8\x30\xa0\x53\x44\x5e\x95\x38\x6a\x0e\xd3\xc5\x6c\x66\x16\x02\x35\x2c\x9c\x8d\xf1\x01\x8f\xde\x51\xd3\x69\x22\xb3\x9c\xb7\x69\xc3\x2e\x7c\xd9\x3b\x3b\xf3\xb3\x38\xb4\xe1\x30\x71\x09\xe0\x32\xa0\x3d\xa3\xbe\xf5\x25\xf5\xdc\xa0\xa1\xa2\x01\x47\x78\x63\x8b\xdd\xaf\x34\x8d\x6f\xdc\x99\xe9\xfc\xfc\x13\x32\xe1\x7a\x0f\x3f\xc8\x6d\xf4\x60\xe4\xb0\xaf\xa2\x7c\x3b\x8e\x51\x3b\x0c\x02\x6a\x27\x69\x88\xdb\x39\x7e\xdb\x68\x7b\xc7\xde\xb2\x5f\xd3\x88\x9d\xd7\xd0\xed\xe2\x16\xf4\x6d\xbf\xf4\xc0\x0e\x73\xef\xcc\xf4\xc1\xc0\x98\x38\x64\xb9\xff\x41\x58\xc2\x82\xb9\xa9\x1b\xe0\xce\x9b\x33\xcb\x4f\xf1\xa3\x5b\xbf\x66\x63\xa3\xec\x86\xfb\x50\x2c\x77\x33\xe2\x7f\xd5\x45\x25\xf9\x08\x4d\x6a\x74\xa4\xe0\xdf\x00\x00\x00\xff\xff\x90\xaa\x42\x04\x84\x06\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 1668, mode: os.FileMode(420), modTime: time.Unix(1487031172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enGbIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x0a\xbd\x40\xf7\x06\x3b\x74\x97\xf6\xb0\xc1\xd8\x06\x3b\x94\x11\xe4\x44\x4b\x05\xa9\x65\x6c\x39\x79\xfd\xc9\x71\x43\x28\xec\x64\xf9\xd3\x9f\x8f\xef\x77\xc1\x18\x7f\x9c\xb2\x4e\x04\xcf\xb0\x2c\xcb\x0b\x66\x72\x03\xe5\x1e\xec\xff\xc9\xb7\x68\x8d\xac\xa9\xf4\x5a\x12\x81\x8a\x7d\x30\x29\x20\x7c\x93\x3f\xc6\x08\x0b\xeb\x15\x46\x99\x30\x8c\x80\x61\xb0\xf2\x70\xc3\x1e\x53\x92\xe0\x5c\x55\x0b\x8e\x94\x3b\x9c\x91\x27\xf4\xab\xcb\x2b\x37\x35\x64\x18\x38\x47\x09\x3c\x13\x67\xe7\x02\xce\x1e\x53\x77\x95\x5b\x9d\x3a\xdb\xb3\x49\xe8\xa5\xa8\x69\xc7\xfa\x6e\xe2\x68\xce\xc5\x9b\x7a\x62\x3d\x17\xef\xdc\xaf\x88\x52\xea\xa2\x9d\xae\x2e\x82\x03\xbc\x5b\xbd\xe9\x4a\x16\x06\xb5\xf6\xbe\xee\xa5\x73\x97\xea\xb6\x03\xa8\xa6\x6d\x69\x55\xba\x0a\x22\x71\x54\x96\xb0\xe3\x79\xe4\xd1\x27\xaa\x47\x31\x80\xa1\x9c\xb8\xc7\x75\x78\x21\xff\x80\xa6\x64\x0b\x0d\x27\x39\xbc\xdd\xe1\x3c\x99\xf7\x1a\x6b\x37\x6f\xe9\xfe\x33\xfe\x20\xcb\xd2\x20\xb4\x7b\xb6\xfd\x17\x00\x00\xff\xff\xd6\x2f\x92\x67\xba\x01\x00\x00")

func confLocaleLocale_enGbIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enGbIni,
		"conf/locale/locale_en-GB.ini",
	)
}

func confLocaleLocale_enGbIni() (*asset, error) {
	bytes, err := confLocaleLocale_enGbIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-GB.ini", size: 442, mode: os.FileMode(420), modTime: time.Unix(1487030387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_ptBrIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x6a\xf3\x40\x0c\x85\xf7\x3a\x85\x2e\x90\xff\x06\xd9\xfc\x5d\xa4\x8b\x14\x02\x2d\x74\x11\x8a\xd1\x38\xaa\x23\xb0\x47\xc3\x8c\x26\x3e\x50\x17\x3d\x48\x2e\x56\x8d\x93\x90\x40\xbb\xb1\x35\x4f\x42\x7a\xef\xdb\x53\x4a\x1f\x60\x62\x23\xe3\x1a\xe7\x79\xfe\x4f\x85\xe1\xc0\xa5\x47\x7f\xbf\xca\x94\x46\x2e\xc8\xc5\x72\xb5\x9a\x09\x13\xf9\xa7\xd7\x89\x7b\xca\xed\x8f\xef\x1c\x76\x34\xf0\x52\x0f\x3a\x52\x1c\x90\xbd\x58\x4d\xe4\x13\x59\x23\x40\xd3\xaa\x8f\x94\x8e\x4e\x24\x23\x85\xe5\xd4\x56\x2e\x6a\x2c\x78\x90\x92\x34\xca\x89\xa5\x00\x44\x3a\x05\xca\xdd\xd1\x4f\xf8\xd4\x2e\x4b\xec\x25\xd1\x78\xd3\x29\x68\xb5\xe6\x4c\x43\xe6\x9b\x38\x88\x1d\x6b\x70\x75\x23\xf6\x5c\x03\xc0\xa7\xaa\x71\xee\x52\x33\xb6\xc6\x27\x37\xc2\x03\x4d\x1c\x4d\x6f\x2d\x63\x4f\x46\xd6\xda\x6f\xd7\x12\x60\xdf\xae\xde\x69\x78\x2e\x89\xf4\xe0\x61\x69\x74\x0d\x4e\x96\x64\xa2\xf1\x8e\xec\x17\xa2\x2c\x0e\xa8\x4e\x84\x0e\x78\x94\x9e\xce\xdf\xe7\x2f\xc5\x99\xc3\x23\xa9\x5a\x28\x1e\x14\x37\xba\x7a\xb9\xe2\xfa\xe7\x2e\x96\x8c\x77\x1b\x97\xa8\x7f\xdd\xde\xb2\xd0\xa5\xed\x2b\xda\x42\x80\x9f\x00\x00\x00\xff\xff\x0f\x2b\xfb\xdc\xd0\x01\x00\x00")

func confLocaleLocale_ptBrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_ptBrIni,
		"conf/locale/locale_pt-BR.ini",
	)
}

func confLocaleLocale_ptBrIni() (*asset, error) {
	bytes, err := confLocaleLocale_ptBrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_pt-BR.ini", size: 464, mode: os.FileMode(420), modTime: time.Unix(1487030387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini":                 confAppIni,
	"conf/locale/locale_en-GB.ini": confLocaleLocale_enGbIni,
	"conf/locale/locale_pt-BR.ini": confLocaleLocale_ptBrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-GB.ini": &bintree{confLocaleLocale_enGbIni, map[string]*bintree{}},
			"locale_pt-BR.ini": &bintree{confLocaleLocale_ptBrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
